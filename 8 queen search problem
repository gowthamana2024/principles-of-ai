#A.Gowthaman AIDS 241801073

def print_solution(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col):
    # Check this column on upper side
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if j < 0:
            break
        if board[i][j] == 1:
            return False

    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if j >= len(board):
            break
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, row):
    if row >= len(board):
        print_solution(board)
        return True

    res = False
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = 1  # Place queen
            res = solve_n_queens_util(board, row + 1) or res
            board[row][col] = 0  # Backtrack

    return res

def solve_n_queens(n):
    board = [[0 for _ in range(n)] for _ in range(n)]
    if not solve_n_queens_util(board, 0):
        print("Solution does not exist")

# Solve the 8-Queens problem
solve_n_queens(8)
